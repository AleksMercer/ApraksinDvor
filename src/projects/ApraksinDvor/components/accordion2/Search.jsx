import React, { useState, useRef } from 'react'

import Footer from '../tinycomp/Footer'

/* Pic import start */

import string from '../../media/accordion2/search/search-string.png'
import tips from '../../media/accordion2/search/search-tips.png'
import build from '../../media/accordion2/search/search-build.png'
import state from '../../media/accordion2/search/search-state.png'
import state2 from '../../media/accordion2/search/search-state2.png'

/* Pic import end */


function Search() {

  const [text, setText] = useState('') 
  const inputFocus = useRef(null)

  const onFocus = () => {
    inputFocus.current.classList.add('focused');
  }

  const onBlur = () => {  
    inputFocus.current.classList.remove('focused');
  }

  return (
    <>
      <section className='search-description'>
        <h1>Search</h1>
        <p>Поиск предлагает пользователям возможность исследовать веб-сайт или приложение, используя ключевые слова. Поиск можно использовать как основное средство поиска контента или как фильтр, помогающий пользователю найти контент.</p>
      </section>

      <section className='search-usage'>
        <h2>Использование</h2>
        <p>Использование поиска уместно, когда необходимо найти информацию в&nbsp;сложном многоуровневым или большом наборе данных, так компонент поиска позволяет посетителям сервисов Апраксина двора эффективно находить нужные мероприятия, локации и&nbsp;товары среди обширного каталога. Он&nbsp;размещается в&nbsp;верхней части всех страниц в&nbsp;удобном и&nbsp;заметном месте.</p>
        <p>Поиск реализован с&nbsp;подсказками вариантов при вводе, обработкой опечаток и&nbsp;выдачей результатов по&nbsp;категориям и&nbsp;типам, а&nbsp;также с&nbsp;предложениями запросов из&nbsp;истории поиска. Это помогает быстрее найти нужные данные.</p>
        <div className='search-usage__block'>
          <input
            autocomplete="off" 
            type='text'
            name='search'
            placeholder='Найти товары'
            value={text}
            onChange={(e) => setText(e.target.value)}
            ref={inputFocus}
            onFocus={onFocus}
            onBlur={onBlur}
          />
          
          { text.length > 0 ? <span onClick={() => setText('')}></span> : <></> }

          <div className='search-button'>
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
              <path d="M15.0951 5.90383C14.4936 5.29114 13.7766 4.8037 12.9856 4.46966C12.1947 4.13562 11.3454 3.9616 10.4867 3.95766C9.62813 3.95371 8.77725 4.11992 7.98324 4.44667C7.18922 4.77343 6.46782 5.25426 5.86068 5.86139C5.25355 6.46853 4.77272 7.18994 4.44596 7.98395C4.1192 8.77796 3.953 9.62885 3.95694 10.4875C3.96089 11.3461 4.13491 12.1954 4.46895 12.9864C4.80298 13.7773 5.29042 14.4943 5.90311 15.0958C7.12587 16.2963 8.7732 16.9654 10.4867 16.9575C12.2003 16.9496 13.8414 16.2655 15.0531 15.0538C16.2647 13.8421 16.9489 12.201 16.9568 10.4875C16.9647 8.77391 16.2956 7.12658 15.0951 5.90383ZM4.48911 4.48983C6.02193 2.95739 8.08227 2.0684 10.2488 2.00466C12.4153 1.94091 14.5244 2.70723 16.1446 4.1469C17.7649 5.58656 18.774 7.59082 18.9655 9.7498C19.1571 11.9088 18.5166 14.0594 17.1751 15.7618L22.5201 21.1068L21.1061 22.5208L15.7611 17.1758C14.0581 18.5124 11.9094 19.1488 9.75317 18.9554C7.59698 18.762 5.59582 17.7532 4.15789 16.1349C2.71996 14.5166 1.95361 12.4107 2.01516 10.2467C2.07671 8.08275 2.96152 6.02379 4.48911 4.48983Z" fill="white"/>
            </svg>
          </div>
        </div>
      </section>

      <section className='search-content'>
        <section className='search-content__container'>
          <h2>Содержание</h2>
          <h3>Строка поиска</h3>

          <div className='search-content__container-text' >
            <p className='text'>Строка поиска всегда имеет одинаковую структуру:</p>
            <div>
              <p>1.</p>
              <p className='mark-text'><span>Поле ввода. </span>Это стандартное поле ввода с&nbsp;меткой поля ввода, позволяющей пользователю понять, что это место, где нужно ввести свой поисковой запрос.</p>
            </div>
            <div>
              <p>2.</p>
              <p className='mark-text'><span>Введенный текст. </span>Текст, вводимый пользователем в&nbsp;поле.</p>
            </div>
            <div>
              <p>3.</p>
              <p className='mark-text'><span>Знак очистки поля. </span>Появляется, когда в&nbsp;поле присутствует введенный пользователем текст. При нажатии очищает поле ввода.</p>
            </div>
            <div>
              <p>4.</p>
              <p className='mark-text'><span>Кнопка поиска. </span>Содержит иконку лупы, что является универсальным и&nbsp;интуитивно понятным обозначением поиска. При нажатии отправляется поисковой запрос и&nbsp;выдаются результаты поиска.</p>
            </div>
          </div>

          <img src={string}  alt="Из чего состоит строка поиска" />
        </section>

        <section className='search-content__container'>
          <h3>Подсказки поиска</h3>

          <div className='search-content__container-text' >
            <p className='text'>В дизайн-системе существует 4 типа подсказок при поиске:</p>
            <div>
              <p>1.</p>
              <p className='mark-text'><span>Предложение из истории запросов. </span>Показывает запросы, которые пользователь уже вводил ранее, что позволяет быстро найти уже искомую ранее информацию. Отображается в&nbsp;начале списка подсказок. В&nbsp;отличии от&nbsp;всех остальных типов содержит иконку удаления предложения, работает по&nbsp;принципу очистки из&nbsp;истории поиска.</p>
            </div>
            <div>
              <p>2.</p>
              <p className='mark-text'><span>Предложение. </span>Предлагаются варианты запросов на&nbsp;основе введенных пользователем слов.</p>
            </div>
            <div>
              <p>3.</p>
              <p className='mark-text'><span>Категория товаров или мероприятий. </span>Показывает категорию товаров или мероприятий, относящуюся к&nbsp;введеному запросу. Позволяет сразу перейти в&nbsp;нужный раздел, чем значительно упрощает навигацию. Содержит путь до&nbsp;категории и&nbsp;фотографию.</p>
            </div>
            <div>
              <p>4.</p>
              <p className='mark-text'><span>Название бренда или магазина. </span>Показывает название бренда или магазина, относящееся к&nbsp;введеному запросу. Позволяет сразу перейти к&nbsp;странице бренда. Содержит тип локации и&nbsp;фотографию.</p>
            </div>
          </div>

          <img src={tips}  alt="Подсказки" />
        </section>
      </section>

      <section className='search-build'>
        <h2>Принципы построения</h2>
        <p>Для правильного визуального восприятия компонента поиска важно соблюдать отступы от&nbsp;окружающих элементов интерфейса.</p>
        <p>Между строкой поиска и&nbsp;списком подсказок следует соблюдать отступ в&nbsp;16&nbsp;px. Также следует соблюдать заданные вертикальные размеры контейнеров строки ввода и&nbsp;подсказок всех типов.</p>
        <img src={build}  alt="Принципы построения строки поиска" />
      </section>

      <section className='search-state'>
        <h2>Состояния</h2>
        <p>Компонент поиска имеет разные состояния, которые четко отличаются друг от&nbsp;друга визуально и&nbsp;помогают пользователю понять текущий статус элемента.</p>
        <img src={state}  alt="Состояния" />
        <p>Для каждого типа подсказки также определено два состояния: Default и&nbsp;Hover. Изменение состояния определяется изменением цвета.</p>
        <img src={state2}  alt="Состояния" />
      </section>

      <Footer />
    </>
  )
}

export default Search